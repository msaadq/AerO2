
DevInterface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00000e0e  00000ea2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012a  00800160  00800160  00000f02  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e5f  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000508  00000000  00000000  00001f07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b0  00000000  00000000  0000240f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00002bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ff  00000000  00000000  00002dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000065b  00000000  00000000  000032fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003956  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__vector_18>
  4c:	0c 94 1b 02 	jmp	0x436	; 0x436 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e0       	ldi	r30, 0x0E	; 14
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 36       	cpi	r26, 0x60	; 96
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a0 e6       	ldi	r26, 0x60	; 96
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 38       	cpi	r26, 0x8A	; 138
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bc 01 	call	0x378	; 0x378 <main>
  9e:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Init_BT>:
 * return: No return value
 */

void Init_BT()
{
	USART0_Init(BAUD_PRESCALER);
  a6:	83 e3       	ldi	r24, 0x33	; 51
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 e7 01 	call	0x3ce	; 0x3ce <USART0_Init>
	Init_ADC();
  ae:	0e 94 c1 01 	call	0x382	; 0x382 <Init_ADC>
  b2:	08 95       	ret

000000b4 <Send_Command>:
 * arg: The String command and String parameters
 * exception: None
 * return: No return value
 */

void Send_Command(char * command, char * parameters) {
  b4:	ef 92       	push	r14
  b6:	ff 92       	push	r15
  b8:	0f 93       	push	r16
  ba:	1f 93       	push	r17
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	8c 01       	movw	r16, r24
  c2:	eb 01       	movw	r28, r22
	
	char *finalCommand = malloc(strlen(command)+strlen(parameters)+2);
  c4:	fc 01       	movw	r30, r24
  c6:	01 90       	ld	r0, Z+
  c8:	00 20       	and	r0, r0
  ca:	e9 f7       	brne	.-6      	; 0xc6 <Send_Command+0x12>
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	cf 01       	movw	r24, r30
  d0:	80 1b       	sub	r24, r16
  d2:	91 0b       	sbc	r25, r17
  d4:	fb 01       	movw	r30, r22
  d6:	01 90       	ld	r0, Z+
  d8:	00 20       	and	r0, r0
  da:	e9 f7       	brne	.-6      	; 0xd6 <Send_Command+0x22>
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	e6 1b       	sub	r30, r22
  e0:	f7 0b       	sbc	r31, r23
  e2:	8e 0f       	add	r24, r30
  e4:	9f 1f       	adc	r25, r31
  e6:	02 96       	adiw	r24, 0x02	; 2
  e8:	0e 94 c2 02 	call	0x584	; 0x584 <malloc>
  ec:	7c 01       	movw	r14, r24
	
	strcpy(finalCommand, command);
  ee:	b8 01       	movw	r22, r16
  f0:	0e 94 ff 03 	call	0x7fe	; 0x7fe <strcpy>
	strcat(finalCommand, ":");
  f4:	f7 01       	movw	r30, r14
  f6:	01 90       	ld	r0, Z+
  f8:	00 20       	and	r0, r0
  fa:	e9 f7       	brne	.-6      	; 0xf6 <Send_Command+0x42>
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	8a e3       	ldi	r24, 0x3A	; 58
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	91 83       	std	Z+1, r25	; 0x01
 104:	80 83       	st	Z, r24
	strcat(finalCommand, parameters);
 106:	be 01       	movw	r22, r28
 108:	c7 01       	movw	r24, r14
 10a:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <strcat>

	USART_putstring(finalCommand);	
 10e:	c7 01       	movw	r24, r14
 110:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <USART_putstring>
	free(finalCommand); // deallocates the string and frees the memory
 114:	c7 01       	movw	r24, r14
 116:	0e 94 57 03 	call	0x6ae	; 0x6ae <free>
}
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	ff 90       	pop	r15
 124:	ef 90       	pop	r14
 126:	08 95       	ret

00000128 <Aut_Routine>:
 * exception: None
 * return: No return value
 */

void Aut_Routine(void) {
	if(receivedString[5] == '1') {
 128:	e0 91 84 02 	lds	r30, 0x0284
 12c:	f0 91 85 02 	lds	r31, 0x0285
 130:	85 81       	ldd	r24, Z+5	; 0x05
 132:	81 33       	cpi	r24, 0x31	; 49
 134:	51 f4       	brne	.+20     	; 0x14a <Aut_Routine+0x22>
		btAvailable = true;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 93 64 01 	sts	0x0164, r24
		Send_Command(I_COM_AUT, "1");
 13c:	66 e0       	ldi	r22, 0x06	; 6
 13e:	71 e0       	ldi	r23, 0x01	; 1
 140:	88 e0       	ldi	r24, 0x08	; 8
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 5a 00 	call	0xb4	; 0xb4 <Send_Command>
 148:	08 95       	ret
		
	} else if (receivedString[5] == '0') {
 14a:	80 33       	cpi	r24, 0x30	; 48
 14c:	41 f4       	brne	.+16     	; 0x15e <Aut_Routine+0x36>
		btAvailable = false;
 14e:	10 92 64 01 	sts	0x0164, r1
		Send_Command(I_COM_AUT, "0");		
 152:	6d e0       	ldi	r22, 0x0D	; 13
 154:	71 e0       	ldi	r23, 0x01	; 1
 156:	88 e0       	ldi	r24, 0x08	; 8
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0e 94 5a 00 	call	0xb4	; 0xb4 <Send_Command>
 15e:	08 95       	ret

00000160 <Pass_Routine>:
 * arg: None
 * exception: None
 * return: No return value
 */

void Pass_Routine(void) {
 160:	a0 91 82 02 	lds	r26, 0x0282
 164:	b0 91 83 02 	lds	r27, 0x0283
 168:	e0 e1       	ldi	r30, 0x10	; 16
 16a:	f1 e0       	ldi	r31, 0x01	; 1
	bool passVerified = true;
	
	for(int i = 0; DEFAULT_PASSWORD[i] != '\0'; i++) {
		if(receivedParameters[i] != DEFAULT_PASSWORD[i]) {
 16c:	80 e7       	ldi	r24, 0x70	; 112
 16e:	21 e0       	ldi	r18, 0x01	; 1
			passVerified = false;
 170:	30 e0       	ldi	r19, 0x00	; 0

void Pass_Routine(void) {
	bool passVerified = true;
	
	for(int i = 0; DEFAULT_PASSWORD[i] != '\0'; i++) {
		if(receivedParameters[i] != DEFAULT_PASSWORD[i]) {
 172:	9d 91       	ld	r25, X+
 174:	89 13       	cpse	r24, r25
			passVerified = false;
 176:	23 2f       	mov	r18, r19
 */

void Pass_Routine(void) {
	bool passVerified = true;
	
	for(int i = 0; DEFAULT_PASSWORD[i] != '\0'; i++) {
 178:	81 91       	ld	r24, Z+
 17a:	81 11       	cpse	r24, r1
 17c:	fa cf       	rjmp	.-12     	; 0x172 <Pass_Routine+0x12>
		if(receivedParameters[i] != DEFAULT_PASSWORD[i]) {
			passVerified = false;
		}
	}
	
	if(passVerified) {
 17e:	22 23       	and	r18, r18
 180:	51 f0       	breq	.+20     	; 0x196 <Pass_Routine+0x36>
		autCorrect = true;
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	80 93 63 01 	sts	0x0163, r24
		Send_Command(I_COM_PAS, "1");
 188:	66 e0       	ldi	r22, 0x06	; 6
 18a:	71 e0       	ldi	r23, 0x01	; 1
 18c:	88 e1       	ldi	r24, 0x18	; 24
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	0e 94 5a 00 	call	0xb4	; 0xb4 <Send_Command>
 194:	08 95       	ret
		
	} else {
		autCorrect = false;
 196:	10 92 63 01 	sts	0x0163, r1
		Send_Command(I_COM_PAS, "0");
 19a:	6d e0       	ldi	r22, 0x0D	; 13
 19c:	71 e0       	ldi	r23, 0x01	; 1
 19e:	88 e1       	ldi	r24, 0x18	; 24
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 5a 00 	call	0xb4	; 0xb4 <Send_Command>
 1a6:	08 95       	ret

000001a8 <Smog_Enable>:
 * exception: None
 * return: No return value
 */

void Smog_Enable(void) {
	if(autCorrect & receivedString[5] == '1') {	
 1a8:	e0 91 84 02 	lds	r30, 0x0284
 1ac:	f0 91 85 02 	lds	r31, 0x0285
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	95 81       	ldd	r25, Z+5	; 0x05
 1b4:	91 33       	cpi	r25, 0x31	; 49
 1b6:	09 f0       	breq	.+2      	; 0x1ba <Smog_Enable+0x12>
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	88 23       	and	r24, r24
 1bc:	81 f0       	breq	.+32     	; 0x1de <Smog_Enable+0x36>
 1be:	80 91 63 01 	lds	r24, 0x0163
 1c2:	88 23       	and	r24, r24
 1c4:	61 f0       	breq	.+24     	; 0x1de <Smog_Enable+0x36>
		Enable_Sensors();
 1c6:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <Enable_Sensors>
		smogAvailable = true;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	80 93 62 01 	sts	0x0162, r24
		Send_Command(I_COM_NSG, "1");
 1d0:	66 e0       	ldi	r22, 0x06	; 6
 1d2:	71 e0       	ldi	r23, 0x01	; 1
 1d4:	8d e1       	ldi	r24, 0x1D	; 29
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	0e 94 5a 00 	call	0xb4	; 0xb4 <Send_Command>
 1dc:	08 95       	ret
	} else {
		Disable_Sensors();
 1de:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <Disable_Sensors>
		smogAvailable = false;
 1e2:	10 92 62 01 	sts	0x0162, r1
		Send_Command(I_COM_NSG, "0");
 1e6:	6d e0       	ldi	r22, 0x0D	; 13
 1e8:	71 e0       	ldi	r23, 0x01	; 1
 1ea:	8d e1       	ldi	r24, 0x1D	; 29
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	0e 94 5a 00 	call	0xb4	; 0xb4 <Send_Command>
 1f2:	08 95       	ret

000001f4 <Req_Smog_Data>:
 * arg: None
 * exception: None
 * return: No return value
 */

void Req_Smog_Data(void) {
 1f4:	ef 92       	push	r14
 1f6:	ff 92       	push	r15
 1f8:	0f 93       	push	r16
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	00 d0       	rcall	.+0      	; 0x202 <Req_Smog_Data+0xe>
 202:	1f 92       	push	r1
 204:	cd b7       	in	r28, 0x3d	; 61
 206:	de b7       	in	r29, 0x3e	; 62
	if(autCorrect & smogAvailable) {
 208:	80 91 62 01 	lds	r24, 0x0162
 20c:	88 23       	and	r24, r24
 20e:	69 f1       	breq	.+90     	; 0x26a <Req_Smog_Data+0x76>
 210:	80 91 63 01 	lds	r24, 0x0163
 214:	88 23       	and	r24, r24
 216:	49 f1       	breq	.+82     	; 0x26a <Req_Smog_Data+0x76>
 218:	08 ee       	ldi	r16, 0xE8	; 232
 21a:	13 e0       	ldi	r17, 0x03	; 3
 21c:	e1 2c       	mov	r14, r1
 21e:	f1 2c       	mov	r15, r1
		char smogData[3];
		int iSmogData = 0;
		
		for(int i = 0; i < 1000; i++) {
			iSmogData += Get_Sensor_Data();
 220:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Get_Sensor_Data>
 224:	e8 0e       	add	r14, r24
 226:	f9 1e       	adc	r15, r25
 228:	01 50       	subi	r16, 0x01	; 1
 22a:	11 09       	sbc	r17, r1
void Req_Smog_Data(void) {
	if(autCorrect & smogAvailable) {
		char smogData[3];
		int iSmogData = 0;
		
		for(int i = 0; i < 1000; i++) {
 22c:	c9 f7       	brne	.-14     	; 0x220 <Req_Smog_Data+0x2c>
			iSmogData += Get_Sensor_Data();
		}	
		iSmogData /= 1000;
 22e:	c7 01       	movw	r24, r14
 230:	68 ee       	ldi	r22, 0xE8	; 232
 232:	73 e0       	ldi	r23, 0x03	; 3
 234:	0e 94 9a 02 	call	0x534	; 0x534 <__divmodhi4>
		
		sprintf(smogData, "%d", iSmogData);
 238:	7f 93       	push	r23
 23a:	6f 93       	push	r22
 23c:	82 e2       	ldi	r24, 0x22	; 34
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	9f 93       	push	r25
 242:	8f 93       	push	r24
 244:	8e 01       	movw	r16, r28
 246:	0f 5f       	subi	r16, 0xFF	; 255
 248:	1f 4f       	sbci	r17, 0xFF	; 255
 24a:	1f 93       	push	r17
 24c:	0f 93       	push	r16
 24e:	0e 94 2d 04 	call	0x85a	; 0x85a <sprintf>
		       
		Send_Command(I_COM_SSG, smogData);
 252:	b8 01       	movw	r22, r16
 254:	85 e2       	ldi	r24, 0x25	; 37
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	0e 94 5a 00 	call	0xb4	; 0xb4 <Send_Command>
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	0f 90       	pop	r0
 268:	06 c0       	rjmp	.+12     	; 0x276 <Req_Smog_Data+0x82>
		
	} else {
		Send_Command(I_COM_NSG, "0");	
 26a:	6d e0       	ldi	r22, 0x0D	; 13
 26c:	71 e0       	ldi	r23, 0x01	; 1
 26e:	8d e1       	ldi	r24, 0x1D	; 29
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	0e 94 5a 00 	call	0xb4	; 0xb4 <Send_Command>
	}
}
 276:	0f 90       	pop	r0
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	1f 91       	pop	r17
 282:	0f 91       	pop	r16
 284:	ff 90       	pop	r15
 286:	ef 90       	pop	r14
 288:	08 95       	ret

0000028a <Compare_Command>:

bool Compare_Command(char *receivedCommand, const char *sampleCommand) {
    bool containsCommand = true;
    
    for(int i = 0; i < 4; i++) {
			if(receivedCommand == '\0') {
 28a:	00 97       	sbiw	r24, 0x00	; 0
 28c:	81 f0       	breq	.+32     	; 0x2ae <Compare_Command+0x24>
 28e:	fc 01       	movw	r30, r24
 290:	a6 2f       	mov	r26, r22
 292:	b7 2f       	mov	r27, r23
 294:	20 e0       	ldi	r18, 0x00	; 0
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	81 e0       	ldi	r24, 0x01	; 1
				containsCommand = false;
				break;
			}
			
			if(receivedCommand[i] != sampleCommand[i]) {
				containsCommand = false;
 29a:	50 e0       	ldi	r21, 0x00	; 0
 29c:	01 c0       	rjmp	.+2      	; 0x2a0 <Compare_Command+0x16>
 29e:	85 2f       	mov	r24, r21
			if(receivedCommand == '\0') {
				containsCommand = false;
				break;
			}
			
			if(receivedCommand[i] != sampleCommand[i]) {
 2a0:	41 91       	ld	r20, Z+
 2a2:	2f 5f       	subi	r18, 0xFF	; 255
 2a4:	3f 4f       	sbci	r19, 0xFF	; 255
 2a6:	9d 91       	ld	r25, X+
 2a8:	49 13       	cpse	r20, r25
 2aa:	03 c0       	rjmp	.+6      	; 0x2b2 <Compare_Command+0x28>
 2ac:	07 c0       	rjmp	.+14     	; 0x2bc <Compare_Command+0x32>
bool Compare_Command(char *receivedCommand, const char *sampleCommand) {
    bool containsCommand = true;
    
    for(int i = 0; i < 4; i++) {
			if(receivedCommand == '\0') {
				containsCommand = false;
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	08 95       	ret
 */

bool Compare_Command(char *receivedCommand, const char *sampleCommand) {
    bool containsCommand = true;
    
    for(int i = 0; i < 4; i++) {
 2b2:	24 30       	cpi	r18, 0x04	; 4
 2b4:	31 05       	cpc	r19, r1
 2b6:	9c f3       	brlt	.-26     	; 0x29e <Compare_Command+0x14>
				containsCommand = false;
				break;
			}
			
			if(receivedCommand[i] != sampleCommand[i]) {
				containsCommand = false;
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	08 95       	ret
 */

bool Compare_Command(char *receivedCommand, const char *sampleCommand) {
    bool containsCommand = true;
    
    for(int i = 0; i < 4; i++) {
 2bc:	24 30       	cpi	r18, 0x04	; 4
 2be:	31 05       	cpc	r19, r1
 2c0:	7c f3       	brlt	.-34     	; 0x2a0 <Compare_Command+0x16>
				containsCommand = false;
			}
		}
	
    return containsCommand;
}
 2c2:	08 95       	ret

000002c4 <BT_Routine>:
 * return: No return value
 */

void BT_Routine(void) {
	
	USART_putstring("READY!");
 2c4:	8a e2       	ldi	r24, 0x2A	; 42
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <USART_putstring>
	
	while(1) {
		receivedString = USART_getstring('\n');
 2cc:	8a e0       	ldi	r24, 0x0A	; 10
 2ce:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <USART_getstring>
 2d2:	90 93 85 02 	sts	0x0285, r25
 2d6:	80 93 84 02 	sts	0x0284, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2da:	8f ec       	ldi	r24, 0xCF	; 207
 2dc:	97 e0       	ldi	r25, 0x07	; 7
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <BT_Routine+0x1a>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <BT_Routine+0x20>
 2e4:	00 00       	nop
		
		_delay_ms(1);
		
		receivedParameters = strtok(receivedString, ":"); 
 2e6:	61 e3       	ldi	r22, 0x31	; 49
 2e8:	71 e0       	ldi	r23, 0x01	; 1
 2ea:	80 91 84 02 	lds	r24, 0x0284
 2ee:	90 91 85 02 	lds	r25, 0x0285
 2f2:	0e 94 ef 03 	call	0x7de	; 0x7de <strtok>
 2f6:	90 93 83 02 	sts	0x0283, r25
 2fa:	80 93 82 02 	sts	0x0282, r24
		receivedParameters = strtok(NULL, "\n");  
 2fe:	63 e3       	ldi	r22, 0x33	; 51
 300:	71 e0       	ldi	r23, 0x01	; 1
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 ef 03 	call	0x7de	; 0x7de <strtok>
 30a:	90 93 83 02 	sts	0x0283, r25
 30e:	80 93 82 02 	sts	0x0282, r24
			
		if(Compare_Command(receivedString, O_COM_AUT)) {
 312:	c0 91 84 02 	lds	r28, 0x0284
 316:	d0 91 85 02 	lds	r29, 0x0285
 31a:	65 e3       	ldi	r22, 0x35	; 53
 31c:	71 e0       	ldi	r23, 0x01	; 1
 31e:	ce 01       	movw	r24, r28
 320:	0e 94 45 01 	call	0x28a	; 0x28a <Compare_Command>
 324:	88 23       	and	r24, r24
 326:	19 f0       	breq	.+6      	; 0x32e <BT_Routine+0x6a>
			Aut_Routine();				
 328:	0e 94 94 00 	call	0x128	; 0x128 <Aut_Routine>
 32c:	cf cf       	rjmp	.-98     	; 0x2cc <BT_Routine+0x8>
		} else if (Compare_Command(receivedString, O_COM_PAS)) {
 32e:	6a e3       	ldi	r22, 0x3A	; 58
 330:	71 e0       	ldi	r23, 0x01	; 1
 332:	ce 01       	movw	r24, r28
 334:	0e 94 45 01 	call	0x28a	; 0x28a <Compare_Command>
 338:	88 23       	and	r24, r24
 33a:	19 f0       	breq	.+6      	; 0x342 <BT_Routine+0x7e>
			Pass_Routine();		
 33c:	0e 94 b0 00 	call	0x160	; 0x160 <Pass_Routine>
 340:	c5 cf       	rjmp	.-118    	; 0x2cc <BT_Routine+0x8>
		} else if (Compare_Command(receivedString, O_COM_NSG)) {
 342:	6f e3       	ldi	r22, 0x3F	; 63
 344:	71 e0       	ldi	r23, 0x01	; 1
 346:	ce 01       	movw	r24, r28
 348:	0e 94 45 01 	call	0x28a	; 0x28a <Compare_Command>
 34c:	88 23       	and	r24, r24
 34e:	19 f0       	breq	.+6      	; 0x356 <BT_Routine+0x92>
			Smog_Enable();		
 350:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Smog_Enable>
 354:	bb cf       	rjmp	.-138    	; 0x2cc <BT_Routine+0x8>
		} else if (Compare_Command(receivedString, O_COM_SSG)) {
 356:	64 e4       	ldi	r22, 0x44	; 68
 358:	71 e0       	ldi	r23, 0x01	; 1
 35a:	ce 01       	movw	r24, r28
 35c:	0e 94 45 01 	call	0x28a	; 0x28a <Compare_Command>
 360:	88 23       	and	r24, r24
 362:	19 f0       	breq	.+6      	; 0x36a <BT_Routine+0xa6>
			Req_Smog_Data();	
 364:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Req_Smog_Data>
 368:	b1 cf       	rjmp	.-158    	; 0x2cc <BT_Routine+0x8>
		} else {
			Send_Command("IINV","COMMAND_REJECTED");		
 36a:	69 e4       	ldi	r22, 0x49	; 73
 36c:	71 e0       	ldi	r23, 0x01	; 1
 36e:	8a e5       	ldi	r24, 0x5A	; 90
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	0e 94 5a 00 	call	0xb4	; 0xb4 <Send_Command>
 376:	aa cf       	rjmp	.-172    	; 0x2cc <BT_Routine+0x8>

00000378 <main>:
 
 #include "bt_communication.h"

int main(void)
{
	Init_BT();
 378:	0e 94 53 00 	call	0xa6	; 0xa6 <Init_BT>

	BT_Routine();
 37c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <BT_Routine>
	while(1);
 380:	ff cf       	rjmp	.-2      	; 0x380 <main+0x8>

00000382 <Init_ADC>:

#include "sensor_interface.h"

void Init_ADC()
{
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)); // Prescaler at 128 so we have an 125Khz clock source
 382:	ea e7       	ldi	r30, 0x7A	; 122
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	87 60       	ori	r24, 0x07	; 7
 38a:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);
 38c:	ac e7       	ldi	r26, 0x7C	; 124
 38e:	b0 e0       	ldi	r27, 0x00	; 0
 390:	8c 91       	ld	r24, X
 392:	80 64       	ori	r24, 0x40	; 64
 394:	8c 93       	st	X, r24
	ADMUX &= ~(1<<REFS1)|~(1<<MUX3)|~(1<<MUX2)|~(1<<MUX1)|~(1<<MUX0);                // A Vcc(+5v) as voltage reference
 396:	8c 91       	ld	r24, X
 398:	8c 93       	st	X, r24
	ADCSRB &= ~((1<<ADTS2)|(1<<ADTS1)|(1<<ADTS0));    // ADC in free-running mode
 39a:	ab e7       	ldi	r26, 0x7B	; 123
 39c:	b0 e0       	ldi	r27, 0x00	; 0
 39e:	8c 91       	ld	r24, X
 3a0:	88 7f       	andi	r24, 0xF8	; 248
 3a2:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADATE);                // Signal source, in this case is the free-running
 3a4:	80 81       	ld	r24, Z
 3a6:	80 62       	ori	r24, 0x20	; 32
 3a8:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);                // Power up the ADC
 3aa:	80 81       	ld	r24, Z
 3ac:	80 68       	ori	r24, 0x80	; 128
 3ae:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                // Start converting
 3b0:	80 81       	ld	r24, Z
 3b2:	80 64       	ori	r24, 0x40	; 64
 3b4:	80 83       	st	Z, r24
 3b6:	08 95       	ret

000003b8 <Enable_Sensors>:
}


void Enable_Sensors()
{
	SENSORS_ON;
 3b8:	44 9a       	sbi	0x08, 4	; 8
	Init_ADC();
 3ba:	0e 94 c1 01 	call	0x382	; 0x382 <Init_ADC>
 3be:	08 95       	ret

000003c0 <Disable_Sensors>:
}

void Disable_Sensors()
{
	SENSORS_OFF;
 3c0:	44 98       	cbi	0x08, 4	; 8
 3c2:	08 95       	ret

000003c4 <Get_Sensor_Data>:
}

int Get_Sensor_Data()
{
	int adc_value = ADCW;
 3c4:	80 91 78 00 	lds	r24, 0x0078
 3c8:	90 91 79 00 	lds	r25, 0x0079
	return adc_value;
 3cc:	08 95       	ret

000003ce <USART0_Init>:
	USART_TxHead = tmphead;
	/* Enable UDRE interrupt */
	UCSR0B |= (1<<UDRIE0);

	return 0;
}
 3ce:	90 93 c5 00 	sts	0x00C5, r25
 3d2:	80 93 c4 00 	sts	0x00C4, r24
 3d6:	88 e9       	ldi	r24, 0x98	; 152
 3d8:	80 93 c1 00 	sts	0x00C1, r24
 3dc:	86 e0       	ldi	r24, 0x06	; 6
 3de:	80 93 c2 00 	sts	0x00C2, r24
 3e2:	10 92 00 02 	sts	0x0200, r1
 3e6:	10 92 01 02 	sts	0x0201, r1
 3ea:	10 92 7e 01 	sts	0x017E, r1
 3ee:	10 92 7f 01 	sts	0x017F, r1
 3f2:	78 94       	sei
 3f4:	08 95       	ret

000003f6 <__vector_18>:
 3f6:	1f 92       	push	r1
 3f8:	0f 92       	push	r0
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	0f 92       	push	r0
 3fe:	11 24       	eor	r1, r1
 400:	8f 93       	push	r24
 402:	9f 93       	push	r25
 404:	ef 93       	push	r30
 406:	ff 93       	push	r31
 408:	80 91 c6 00 	lds	r24, 0x00C6
 40c:	e0 91 01 02 	lds	r30, 0x0201
 410:	ef 5f       	subi	r30, 0xFF	; 255
 412:	ef 77       	andi	r30, 0x7F	; 127
 414:	e0 93 01 02 	sts	0x0201, r30
 418:	90 91 00 02 	lds	r25, 0x0200
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	ee 5f       	subi	r30, 0xFE	; 254
 420:	fd 4f       	sbci	r31, 0xFD	; 253
 422:	80 83       	st	Z, r24
 424:	ff 91       	pop	r31
 426:	ef 91       	pop	r30
 428:	9f 91       	pop	r25
 42a:	8f 91       	pop	r24
 42c:	0f 90       	pop	r0
 42e:	0f be       	out	0x3f, r0	; 63
 430:	0f 90       	pop	r0
 432:	1f 90       	pop	r1
 434:	18 95       	reti

00000436 <__vector_19>:
 436:	1f 92       	push	r1
 438:	0f 92       	push	r0
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	0f 92       	push	r0
 43e:	11 24       	eor	r1, r1
 440:	8f 93       	push	r24
 442:	9f 93       	push	r25
 444:	ef 93       	push	r30
 446:	ff 93       	push	r31
 448:	90 91 7f 01 	lds	r25, 0x017F
 44c:	80 91 7e 01 	lds	r24, 0x017E
 450:	98 17       	cp	r25, r24
 452:	69 f0       	breq	.+26     	; 0x46e <__vector_19+0x38>
 454:	e0 91 7e 01 	lds	r30, 0x017E
 458:	ef 5f       	subi	r30, 0xFF	; 255
 45a:	ef 77       	andi	r30, 0x7F	; 127
 45c:	e0 93 7e 01 	sts	0x017E, r30
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	e0 58       	subi	r30, 0x80	; 128
 464:	fe 4f       	sbci	r31, 0xFE	; 254
 466:	80 81       	ld	r24, Z
 468:	80 93 c6 00 	sts	0x00C6, r24
 46c:	05 c0       	rjmp	.+10     	; 0x478 <__vector_19+0x42>
 46e:	e1 ec       	ldi	r30, 0xC1	; 193
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	80 81       	ld	r24, Z
 474:	8f 7d       	andi	r24, 0xDF	; 223
 476:	80 83       	st	Z, r24
 478:	ff 91       	pop	r31
 47a:	ef 91       	pop	r30
 47c:	9f 91       	pop	r25
 47e:	8f 91       	pop	r24
 480:	0f 90       	pop	r0
 482:	0f be       	out	0x3f, r0	; 63
 484:	0f 90       	pop	r0
 486:	1f 90       	pop	r1
 488:	18 95       	reti

0000048a <USART0_Receive>:
 48a:	90 91 01 02 	lds	r25, 0x0201
 48e:	80 91 00 02 	lds	r24, 0x0200
 492:	98 17       	cp	r25, r24
 494:	d1 f3       	breq	.-12     	; 0x48a <USART0_Receive>
 496:	e0 91 00 02 	lds	r30, 0x0200
 49a:	ef 5f       	subi	r30, 0xFF	; 255
 49c:	ef 77       	andi	r30, 0x7F	; 127
 49e:	e0 93 00 02 	sts	0x0200, r30
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	ee 5f       	subi	r30, 0xFE	; 254
 4a6:	fd 4f       	sbci	r31, 0xFD	; 253
 4a8:	80 81       	ld	r24, Z
 4aa:	08 95       	ret

000004ac <USART0_Transmit>:
 4ac:	20 91 7f 01 	lds	r18, 0x017F
 4b0:	2f 5f       	subi	r18, 0xFF	; 255
 4b2:	2f 77       	andi	r18, 0x7F	; 127
 4b4:	90 91 7e 01 	lds	r25, 0x017E
 4b8:	29 17       	cp	r18, r25
 4ba:	e1 f3       	breq	.-8      	; 0x4b4 <USART0_Transmit+0x8>
 4bc:	e2 2f       	mov	r30, r18
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	e0 58       	subi	r30, 0x80	; 128
 4c2:	fe 4f       	sbci	r31, 0xFE	; 254
 4c4:	80 83       	st	Z, r24
 4c6:	20 93 7f 01 	sts	0x017F, r18
 4ca:	e1 ec       	ldi	r30, 0xC1	; 193
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	80 81       	ld	r24, Z
 4d0:	80 62       	ori	r24, 0x20	; 32
 4d2:	80 83       	st	Z, r24
 4d4:	08 95       	ret

000004d6 <USART_putstring>:


void USART_putstring(char* StringPtr)
{
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00)
 4dc:	88 81       	ld	r24, Y
 4de:	88 23       	and	r24, r24
 4e0:	31 f0       	breq	.+12     	; 0x4ee <USART_putstring+0x18>
 4e2:	21 96       	adiw	r28, 0x01	; 1
	{
		USART0_Transmit(*StringPtr);
 4e4:	0e 94 56 02 	call	0x4ac	; 0x4ac <USART0_Transmit>
}


void USART_putstring(char* StringPtr)
{
	while(*StringPtr != 0x00)
 4e8:	89 91       	ld	r24, Y+
 4ea:	81 11       	cpse	r24, r1
 4ec:	fb cf       	rjmp	.-10     	; 0x4e4 <USART_putstring+0xe>
	{
		USART0_Transmit(*StringPtr);
		StringPtr++;
	}
}
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	08 95       	ret

000004f4 <USART_getstring>:


char* USART_getstring(char escapeSeq)
{
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
	char seq = ' ';
	static char buffer[25];
	buffer[0] = '\0';
 4f8:	10 92 65 01 	sts	0x0165, r1

	uint8_t index = 0;

	while(seq != escapeSeq)
 4fc:	80 32       	cpi	r24, 0x20	; 32
 4fe:	79 f0       	breq	.+30     	; 0x51e <USART_getstring+0x2a>
 500:	d8 2f       	mov	r29, r24
 502:	c0 e0       	ldi	r28, 0x00	; 0
	{
		seq = USART0_Receive();
 504:	0e 94 45 02 	call	0x48a	; 0x48a <USART0_Receive>
		buffer[index++] = seq;
 508:	91 e0       	ldi	r25, 0x01	; 1
 50a:	9c 0f       	add	r25, r28
 50c:	ec 2f       	mov	r30, r28
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	eb 59       	subi	r30, 0x9B	; 155
 512:	fe 4f       	sbci	r31, 0xFE	; 254
 514:	80 83       	st	Z, r24
 516:	c9 2f       	mov	r28, r25
	static char buffer[25];
	buffer[0] = '\0';

	uint8_t index = 0;

	while(seq != escapeSeq)
 518:	d8 13       	cpse	r29, r24
 51a:	f4 cf       	rjmp	.-24     	; 0x504 <USART_getstring+0x10>
 51c:	01 c0       	rjmp	.+2      	; 0x520 <USART_getstring+0x2c>
{
	char seq = ' ';
	static char buffer[25];
	buffer[0] = '\0';

	uint8_t index = 0;
 51e:	90 e0       	ldi	r25, 0x00	; 0
	{
		seq = USART0_Receive();
		buffer[index++] = seq;
	}

	buffer[index] = NULL;
 520:	e9 2f       	mov	r30, r25
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	eb 59       	subi	r30, 0x9B	; 155
 526:	fe 4f       	sbci	r31, 0xFE	; 254
 528:	10 82       	st	Z, r1

	return buffer;
}
 52a:	85 e6       	ldi	r24, 0x65	; 101
 52c:	91 e0       	ldi	r25, 0x01	; 1
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	08 95       	ret

00000534 <__divmodhi4>:
 534:	97 fb       	bst	r25, 7
 536:	07 2e       	mov	r0, r23
 538:	16 f4       	brtc	.+4      	; 0x53e <__divmodhi4+0xa>
 53a:	00 94       	com	r0
 53c:	07 d0       	rcall	.+14     	; 0x54c <__divmodhi4_neg1>
 53e:	77 fd       	sbrc	r23, 7
 540:	09 d0       	rcall	.+18     	; 0x554 <__divmodhi4_neg2>
 542:	0e 94 ae 02 	call	0x55c	; 0x55c <__udivmodhi4>
 546:	07 fc       	sbrc	r0, 7
 548:	05 d0       	rcall	.+10     	; 0x554 <__divmodhi4_neg2>
 54a:	3e f4       	brtc	.+14     	; 0x55a <__divmodhi4_exit>

0000054c <__divmodhi4_neg1>:
 54c:	90 95       	com	r25
 54e:	81 95       	neg	r24
 550:	9f 4f       	sbci	r25, 0xFF	; 255
 552:	08 95       	ret

00000554 <__divmodhi4_neg2>:
 554:	70 95       	com	r23
 556:	61 95       	neg	r22
 558:	7f 4f       	sbci	r23, 0xFF	; 255

0000055a <__divmodhi4_exit>:
 55a:	08 95       	ret

0000055c <__udivmodhi4>:
 55c:	aa 1b       	sub	r26, r26
 55e:	bb 1b       	sub	r27, r27
 560:	51 e1       	ldi	r21, 0x11	; 17
 562:	07 c0       	rjmp	.+14     	; 0x572 <__udivmodhi4_ep>

00000564 <__udivmodhi4_loop>:
 564:	aa 1f       	adc	r26, r26
 566:	bb 1f       	adc	r27, r27
 568:	a6 17       	cp	r26, r22
 56a:	b7 07       	cpc	r27, r23
 56c:	10 f0       	brcs	.+4      	; 0x572 <__udivmodhi4_ep>
 56e:	a6 1b       	sub	r26, r22
 570:	b7 0b       	sbc	r27, r23

00000572 <__udivmodhi4_ep>:
 572:	88 1f       	adc	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	5a 95       	dec	r21
 578:	a9 f7       	brne	.-22     	; 0x564 <__udivmodhi4_loop>
 57a:	80 95       	com	r24
 57c:	90 95       	com	r25
 57e:	bc 01       	movw	r22, r24
 580:	cd 01       	movw	r24, r26
 582:	08 95       	ret

00000584 <malloc>:
 584:	cf 93       	push	r28
 586:	df 93       	push	r29
 588:	82 30       	cpi	r24, 0x02	; 2
 58a:	91 05       	cpc	r25, r1
 58c:	10 f4       	brcc	.+4      	; 0x592 <malloc+0xe>
 58e:	82 e0       	ldi	r24, 0x02	; 2
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	e0 91 88 02 	lds	r30, 0x0288
 596:	f0 91 89 02 	lds	r31, 0x0289
 59a:	20 e0       	ldi	r18, 0x00	; 0
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	c0 e0       	ldi	r28, 0x00	; 0
 5a0:	d0 e0       	ldi	r29, 0x00	; 0
 5a2:	30 97       	sbiw	r30, 0x00	; 0
 5a4:	11 f1       	breq	.+68     	; 0x5ea <malloc+0x66>
 5a6:	40 81       	ld	r20, Z
 5a8:	51 81       	ldd	r21, Z+1	; 0x01
 5aa:	48 17       	cp	r20, r24
 5ac:	59 07       	cpc	r21, r25
 5ae:	c0 f0       	brcs	.+48     	; 0x5e0 <malloc+0x5c>
 5b0:	48 17       	cp	r20, r24
 5b2:	59 07       	cpc	r21, r25
 5b4:	61 f4       	brne	.+24     	; 0x5ce <malloc+0x4a>
 5b6:	82 81       	ldd	r24, Z+2	; 0x02
 5b8:	93 81       	ldd	r25, Z+3	; 0x03
 5ba:	20 97       	sbiw	r28, 0x00	; 0
 5bc:	19 f0       	breq	.+6      	; 0x5c4 <malloc+0x40>
 5be:	9b 83       	std	Y+3, r25	; 0x03
 5c0:	8a 83       	std	Y+2, r24	; 0x02
 5c2:	2b c0       	rjmp	.+86     	; 0x61a <malloc+0x96>
 5c4:	90 93 89 02 	sts	0x0289, r25
 5c8:	80 93 88 02 	sts	0x0288, r24
 5cc:	26 c0       	rjmp	.+76     	; 0x61a <malloc+0x96>
 5ce:	21 15       	cp	r18, r1
 5d0:	31 05       	cpc	r19, r1
 5d2:	19 f0       	breq	.+6      	; 0x5da <malloc+0x56>
 5d4:	42 17       	cp	r20, r18
 5d6:	53 07       	cpc	r21, r19
 5d8:	18 f4       	brcc	.+6      	; 0x5e0 <malloc+0x5c>
 5da:	9a 01       	movw	r18, r20
 5dc:	be 01       	movw	r22, r28
 5de:	df 01       	movw	r26, r30
 5e0:	ef 01       	movw	r28, r30
 5e2:	02 80       	ldd	r0, Z+2	; 0x02
 5e4:	f3 81       	ldd	r31, Z+3	; 0x03
 5e6:	e0 2d       	mov	r30, r0
 5e8:	dc cf       	rjmp	.-72     	; 0x5a2 <malloc+0x1e>
 5ea:	21 15       	cp	r18, r1
 5ec:	31 05       	cpc	r19, r1
 5ee:	09 f1       	breq	.+66     	; 0x632 <malloc+0xae>
 5f0:	28 1b       	sub	r18, r24
 5f2:	39 0b       	sbc	r19, r25
 5f4:	24 30       	cpi	r18, 0x04	; 4
 5f6:	31 05       	cpc	r19, r1
 5f8:	90 f4       	brcc	.+36     	; 0x61e <malloc+0x9a>
 5fa:	12 96       	adiw	r26, 0x02	; 2
 5fc:	8d 91       	ld	r24, X+
 5fe:	9c 91       	ld	r25, X
 600:	13 97       	sbiw	r26, 0x03	; 3
 602:	61 15       	cp	r22, r1
 604:	71 05       	cpc	r23, r1
 606:	21 f0       	breq	.+8      	; 0x610 <malloc+0x8c>
 608:	fb 01       	movw	r30, r22
 60a:	93 83       	std	Z+3, r25	; 0x03
 60c:	82 83       	std	Z+2, r24	; 0x02
 60e:	04 c0       	rjmp	.+8      	; 0x618 <malloc+0x94>
 610:	90 93 89 02 	sts	0x0289, r25
 614:	80 93 88 02 	sts	0x0288, r24
 618:	fd 01       	movw	r30, r26
 61a:	32 96       	adiw	r30, 0x02	; 2
 61c:	44 c0       	rjmp	.+136    	; 0x6a6 <malloc+0x122>
 61e:	fd 01       	movw	r30, r26
 620:	e2 0f       	add	r30, r18
 622:	f3 1f       	adc	r31, r19
 624:	81 93       	st	Z+, r24
 626:	91 93       	st	Z+, r25
 628:	22 50       	subi	r18, 0x02	; 2
 62a:	31 09       	sbc	r19, r1
 62c:	2d 93       	st	X+, r18
 62e:	3c 93       	st	X, r19
 630:	3a c0       	rjmp	.+116    	; 0x6a6 <malloc+0x122>
 632:	20 91 86 02 	lds	r18, 0x0286
 636:	30 91 87 02 	lds	r19, 0x0287
 63a:	23 2b       	or	r18, r19
 63c:	41 f4       	brne	.+16     	; 0x64e <malloc+0xca>
 63e:	20 91 02 01 	lds	r18, 0x0102
 642:	30 91 03 01 	lds	r19, 0x0103
 646:	30 93 87 02 	sts	0x0287, r19
 64a:	20 93 86 02 	sts	0x0286, r18
 64e:	20 91 00 01 	lds	r18, 0x0100
 652:	30 91 01 01 	lds	r19, 0x0101
 656:	21 15       	cp	r18, r1
 658:	31 05       	cpc	r19, r1
 65a:	41 f4       	brne	.+16     	; 0x66c <malloc+0xe8>
 65c:	2d b7       	in	r18, 0x3d	; 61
 65e:	3e b7       	in	r19, 0x3e	; 62
 660:	40 91 04 01 	lds	r20, 0x0104
 664:	50 91 05 01 	lds	r21, 0x0105
 668:	24 1b       	sub	r18, r20
 66a:	35 0b       	sbc	r19, r21
 66c:	e0 91 86 02 	lds	r30, 0x0286
 670:	f0 91 87 02 	lds	r31, 0x0287
 674:	e2 17       	cp	r30, r18
 676:	f3 07       	cpc	r31, r19
 678:	a0 f4       	brcc	.+40     	; 0x6a2 <malloc+0x11e>
 67a:	2e 1b       	sub	r18, r30
 67c:	3f 0b       	sbc	r19, r31
 67e:	28 17       	cp	r18, r24
 680:	39 07       	cpc	r19, r25
 682:	78 f0       	brcs	.+30     	; 0x6a2 <malloc+0x11e>
 684:	ac 01       	movw	r20, r24
 686:	4e 5f       	subi	r20, 0xFE	; 254
 688:	5f 4f       	sbci	r21, 0xFF	; 255
 68a:	24 17       	cp	r18, r20
 68c:	35 07       	cpc	r19, r21
 68e:	48 f0       	brcs	.+18     	; 0x6a2 <malloc+0x11e>
 690:	4e 0f       	add	r20, r30
 692:	5f 1f       	adc	r21, r31
 694:	50 93 87 02 	sts	0x0287, r21
 698:	40 93 86 02 	sts	0x0286, r20
 69c:	81 93       	st	Z+, r24
 69e:	91 93       	st	Z+, r25
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <malloc+0x122>
 6a2:	e0 e0       	ldi	r30, 0x00	; 0
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	cf 01       	movw	r24, r30
 6a8:	df 91       	pop	r29
 6aa:	cf 91       	pop	r28
 6ac:	08 95       	ret

000006ae <free>:
 6ae:	0f 93       	push	r16
 6b0:	1f 93       	push	r17
 6b2:	cf 93       	push	r28
 6b4:	df 93       	push	r29
 6b6:	00 97       	sbiw	r24, 0x00	; 0
 6b8:	09 f4       	brne	.+2      	; 0x6bc <free+0xe>
 6ba:	8c c0       	rjmp	.+280    	; 0x7d4 <free+0x126>
 6bc:	fc 01       	movw	r30, r24
 6be:	32 97       	sbiw	r30, 0x02	; 2
 6c0:	13 82       	std	Z+3, r1	; 0x03
 6c2:	12 82       	std	Z+2, r1	; 0x02
 6c4:	00 91 88 02 	lds	r16, 0x0288
 6c8:	10 91 89 02 	lds	r17, 0x0289
 6cc:	01 15       	cp	r16, r1
 6ce:	11 05       	cpc	r17, r1
 6d0:	81 f4       	brne	.+32     	; 0x6f2 <free+0x44>
 6d2:	20 81       	ld	r18, Z
 6d4:	31 81       	ldd	r19, Z+1	; 0x01
 6d6:	82 0f       	add	r24, r18
 6d8:	93 1f       	adc	r25, r19
 6da:	20 91 86 02 	lds	r18, 0x0286
 6de:	30 91 87 02 	lds	r19, 0x0287
 6e2:	28 17       	cp	r18, r24
 6e4:	39 07       	cpc	r19, r25
 6e6:	79 f5       	brne	.+94     	; 0x746 <free+0x98>
 6e8:	f0 93 87 02 	sts	0x0287, r31
 6ec:	e0 93 86 02 	sts	0x0286, r30
 6f0:	71 c0       	rjmp	.+226    	; 0x7d4 <free+0x126>
 6f2:	d8 01       	movw	r26, r16
 6f4:	40 e0       	ldi	r20, 0x00	; 0
 6f6:	50 e0       	ldi	r21, 0x00	; 0
 6f8:	ae 17       	cp	r26, r30
 6fa:	bf 07       	cpc	r27, r31
 6fc:	50 f4       	brcc	.+20     	; 0x712 <free+0x64>
 6fe:	12 96       	adiw	r26, 0x02	; 2
 700:	2d 91       	ld	r18, X+
 702:	3c 91       	ld	r19, X
 704:	13 97       	sbiw	r26, 0x03	; 3
 706:	ad 01       	movw	r20, r26
 708:	21 15       	cp	r18, r1
 70a:	31 05       	cpc	r19, r1
 70c:	09 f1       	breq	.+66     	; 0x750 <free+0xa2>
 70e:	d9 01       	movw	r26, r18
 710:	f3 cf       	rjmp	.-26     	; 0x6f8 <free+0x4a>
 712:	9d 01       	movw	r18, r26
 714:	da 01       	movw	r26, r20
 716:	33 83       	std	Z+3, r19	; 0x03
 718:	22 83       	std	Z+2, r18	; 0x02
 71a:	60 81       	ld	r22, Z
 71c:	71 81       	ldd	r23, Z+1	; 0x01
 71e:	86 0f       	add	r24, r22
 720:	97 1f       	adc	r25, r23
 722:	82 17       	cp	r24, r18
 724:	93 07       	cpc	r25, r19
 726:	69 f4       	brne	.+26     	; 0x742 <free+0x94>
 728:	ec 01       	movw	r28, r24
 72a:	28 81       	ld	r18, Y
 72c:	39 81       	ldd	r19, Y+1	; 0x01
 72e:	26 0f       	add	r18, r22
 730:	37 1f       	adc	r19, r23
 732:	2e 5f       	subi	r18, 0xFE	; 254
 734:	3f 4f       	sbci	r19, 0xFF	; 255
 736:	31 83       	std	Z+1, r19	; 0x01
 738:	20 83       	st	Z, r18
 73a:	8a 81       	ldd	r24, Y+2	; 0x02
 73c:	9b 81       	ldd	r25, Y+3	; 0x03
 73e:	93 83       	std	Z+3, r25	; 0x03
 740:	82 83       	std	Z+2, r24	; 0x02
 742:	45 2b       	or	r20, r21
 744:	29 f4       	brne	.+10     	; 0x750 <free+0xa2>
 746:	f0 93 89 02 	sts	0x0289, r31
 74a:	e0 93 88 02 	sts	0x0288, r30
 74e:	42 c0       	rjmp	.+132    	; 0x7d4 <free+0x126>
 750:	13 96       	adiw	r26, 0x03	; 3
 752:	fc 93       	st	X, r31
 754:	ee 93       	st	-X, r30
 756:	12 97       	sbiw	r26, 0x02	; 2
 758:	ed 01       	movw	r28, r26
 75a:	49 91       	ld	r20, Y+
 75c:	59 91       	ld	r21, Y+
 75e:	9e 01       	movw	r18, r28
 760:	24 0f       	add	r18, r20
 762:	35 1f       	adc	r19, r21
 764:	e2 17       	cp	r30, r18
 766:	f3 07       	cpc	r31, r19
 768:	71 f4       	brne	.+28     	; 0x786 <free+0xd8>
 76a:	80 81       	ld	r24, Z
 76c:	91 81       	ldd	r25, Z+1	; 0x01
 76e:	84 0f       	add	r24, r20
 770:	95 1f       	adc	r25, r21
 772:	02 96       	adiw	r24, 0x02	; 2
 774:	11 96       	adiw	r26, 0x01	; 1
 776:	9c 93       	st	X, r25
 778:	8e 93       	st	-X, r24
 77a:	82 81       	ldd	r24, Z+2	; 0x02
 77c:	93 81       	ldd	r25, Z+3	; 0x03
 77e:	13 96       	adiw	r26, 0x03	; 3
 780:	9c 93       	st	X, r25
 782:	8e 93       	st	-X, r24
 784:	12 97       	sbiw	r26, 0x02	; 2
 786:	e0 e0       	ldi	r30, 0x00	; 0
 788:	f0 e0       	ldi	r31, 0x00	; 0
 78a:	d8 01       	movw	r26, r16
 78c:	12 96       	adiw	r26, 0x02	; 2
 78e:	8d 91       	ld	r24, X+
 790:	9c 91       	ld	r25, X
 792:	13 97       	sbiw	r26, 0x03	; 3
 794:	00 97       	sbiw	r24, 0x00	; 0
 796:	19 f0       	breq	.+6      	; 0x79e <free+0xf0>
 798:	f8 01       	movw	r30, r16
 79a:	8c 01       	movw	r16, r24
 79c:	f6 cf       	rjmp	.-20     	; 0x78a <free+0xdc>
 79e:	8d 91       	ld	r24, X+
 7a0:	9c 91       	ld	r25, X
 7a2:	98 01       	movw	r18, r16
 7a4:	2e 5f       	subi	r18, 0xFE	; 254
 7a6:	3f 4f       	sbci	r19, 0xFF	; 255
 7a8:	82 0f       	add	r24, r18
 7aa:	93 1f       	adc	r25, r19
 7ac:	20 91 86 02 	lds	r18, 0x0286
 7b0:	30 91 87 02 	lds	r19, 0x0287
 7b4:	28 17       	cp	r18, r24
 7b6:	39 07       	cpc	r19, r25
 7b8:	69 f4       	brne	.+26     	; 0x7d4 <free+0x126>
 7ba:	30 97       	sbiw	r30, 0x00	; 0
 7bc:	29 f4       	brne	.+10     	; 0x7c8 <free+0x11a>
 7be:	10 92 89 02 	sts	0x0289, r1
 7c2:	10 92 88 02 	sts	0x0288, r1
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <free+0x11e>
 7c8:	13 82       	std	Z+3, r1	; 0x03
 7ca:	12 82       	std	Z+2, r1	; 0x02
 7cc:	10 93 87 02 	sts	0x0287, r17
 7d0:	00 93 86 02 	sts	0x0286, r16
 7d4:	df 91       	pop	r29
 7d6:	cf 91       	pop	r28
 7d8:	1f 91       	pop	r17
 7da:	0f 91       	pop	r16
 7dc:	08 95       	ret

000007de <strtok>:
 7de:	40 e6       	ldi	r20, 0x60	; 96
 7e0:	51 e0       	ldi	r21, 0x01	; 1
 7e2:	0e 94 06 04 	call	0x80c	; 0x80c <strtok_r>
 7e6:	08 95       	ret

000007e8 <strcat>:
 7e8:	fb 01       	movw	r30, r22
 7ea:	dc 01       	movw	r26, r24
 7ec:	0d 90       	ld	r0, X+
 7ee:	00 20       	and	r0, r0
 7f0:	e9 f7       	brne	.-6      	; 0x7ec <strcat+0x4>
 7f2:	11 97       	sbiw	r26, 0x01	; 1
 7f4:	01 90       	ld	r0, Z+
 7f6:	0d 92       	st	X+, r0
 7f8:	00 20       	and	r0, r0
 7fa:	e1 f7       	brne	.-8      	; 0x7f4 <strcat+0xc>
 7fc:	08 95       	ret

000007fe <strcpy>:
 7fe:	fb 01       	movw	r30, r22
 800:	dc 01       	movw	r26, r24
 802:	01 90       	ld	r0, Z+
 804:	0d 92       	st	X+, r0
 806:	00 20       	and	r0, r0
 808:	e1 f7       	brne	.-8      	; 0x802 <strcpy+0x4>
 80a:	08 95       	ret

0000080c <strtok_r>:
 80c:	fa 01       	movw	r30, r20
 80e:	a1 91       	ld	r26, Z+
 810:	b0 81       	ld	r27, Z
 812:	00 97       	sbiw	r24, 0x00	; 0
 814:	19 f4       	brne	.+6      	; 0x81c <strtok_r+0x10>
 816:	10 97       	sbiw	r26, 0x00	; 0
 818:	e1 f0       	breq	.+56     	; 0x852 <strtok_r+0x46>
 81a:	cd 01       	movw	r24, r26
 81c:	dc 01       	movw	r26, r24
 81e:	cd 01       	movw	r24, r26
 820:	0d 90       	ld	r0, X+
 822:	00 20       	and	r0, r0
 824:	11 f4       	brne	.+4      	; 0x82a <strtok_r+0x1e>
 826:	c0 01       	movw	r24, r0
 828:	13 c0       	rjmp	.+38     	; 0x850 <strtok_r+0x44>
 82a:	fb 01       	movw	r30, r22
 82c:	21 91       	ld	r18, Z+
 82e:	22 23       	and	r18, r18
 830:	19 f0       	breq	.+6      	; 0x838 <strtok_r+0x2c>
 832:	20 15       	cp	r18, r0
 834:	d9 f7       	brne	.-10     	; 0x82c <strtok_r+0x20>
 836:	f3 cf       	rjmp	.-26     	; 0x81e <strtok_r+0x12>
 838:	fb 01       	movw	r30, r22
 83a:	21 91       	ld	r18, Z+
 83c:	20 15       	cp	r18, r0
 83e:	19 f4       	brne	.+6      	; 0x846 <strtok_r+0x3a>
 840:	1e 92       	st	-X, r1
 842:	11 96       	adiw	r26, 0x01	; 1
 844:	06 c0       	rjmp	.+12     	; 0x852 <strtok_r+0x46>
 846:	22 23       	and	r18, r18
 848:	c1 f7       	brne	.-16     	; 0x83a <strtok_r+0x2e>
 84a:	0d 90       	ld	r0, X+
 84c:	00 20       	and	r0, r0
 84e:	a1 f7       	brne	.-24     	; 0x838 <strtok_r+0x2c>
 850:	d0 01       	movw	r26, r0
 852:	fa 01       	movw	r30, r20
 854:	a1 93       	st	Z+, r26
 856:	b0 83       	st	Z, r27
 858:	08 95       	ret

0000085a <sprintf>:
 85a:	ae e0       	ldi	r26, 0x0E	; 14
 85c:	b0 e0       	ldi	r27, 0x00	; 0
 85e:	e3 e3       	ldi	r30, 0x33	; 51
 860:	f4 e0       	ldi	r31, 0x04	; 4
 862:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__prologue_saves__+0x1c>
 866:	0d 89       	ldd	r16, Y+21	; 0x15
 868:	1e 89       	ldd	r17, Y+22	; 0x16
 86a:	86 e0       	ldi	r24, 0x06	; 6
 86c:	8c 83       	std	Y+4, r24	; 0x04
 86e:	1a 83       	std	Y+2, r17	; 0x02
 870:	09 83       	std	Y+1, r16	; 0x01
 872:	8f ef       	ldi	r24, 0xFF	; 255
 874:	9f e7       	ldi	r25, 0x7F	; 127
 876:	9e 83       	std	Y+6, r25	; 0x06
 878:	8d 83       	std	Y+5, r24	; 0x05
 87a:	ae 01       	movw	r20, r28
 87c:	47 5e       	subi	r20, 0xE7	; 231
 87e:	5f 4f       	sbci	r21, 0xFF	; 255
 880:	6f 89       	ldd	r22, Y+23	; 0x17
 882:	78 8d       	ldd	r23, Y+24	; 0x18
 884:	ce 01       	movw	r24, r28
 886:	01 96       	adiw	r24, 0x01	; 1
 888:	0e 94 50 04 	call	0x8a0	; 0x8a0 <vfprintf>
 88c:	2f 81       	ldd	r18, Y+7	; 0x07
 88e:	38 85       	ldd	r19, Y+8	; 0x08
 890:	f8 01       	movw	r30, r16
 892:	e2 0f       	add	r30, r18
 894:	f3 1f       	adc	r31, r19
 896:	10 82       	st	Z, r1
 898:	2e 96       	adiw	r28, 0x0e	; 14
 89a:	e4 e0       	ldi	r30, 0x04	; 4
 89c:	0c 94 f8 06 	jmp	0xdf0	; 0xdf0 <__epilogue_restores__+0x1c>

000008a0 <vfprintf>:
 8a0:	ac e0       	ldi	r26, 0x0C	; 12
 8a2:	b0 e0       	ldi	r27, 0x00	; 0
 8a4:	e6 e5       	ldi	r30, 0x56	; 86
 8a6:	f4 e0       	ldi	r31, 0x04	; 4
 8a8:	0c 94 ce 06 	jmp	0xd9c	; 0xd9c <__prologue_saves__>
 8ac:	7c 01       	movw	r14, r24
 8ae:	6b 01       	movw	r12, r22
 8b0:	8a 01       	movw	r16, r20
 8b2:	fc 01       	movw	r30, r24
 8b4:	17 82       	std	Z+7, r1	; 0x07
 8b6:	16 82       	std	Z+6, r1	; 0x06
 8b8:	83 81       	ldd	r24, Z+3	; 0x03
 8ba:	81 ff       	sbrs	r24, 1
 8bc:	bd c1       	rjmp	.+890    	; 0xc38 <__stack+0x339>
 8be:	ce 01       	movw	r24, r28
 8c0:	01 96       	adiw	r24, 0x01	; 1
 8c2:	4c 01       	movw	r8, r24
 8c4:	f7 01       	movw	r30, r14
 8c6:	93 81       	ldd	r25, Z+3	; 0x03
 8c8:	f6 01       	movw	r30, r12
 8ca:	93 fd       	sbrc	r25, 3
 8cc:	85 91       	lpm	r24, Z+
 8ce:	93 ff       	sbrs	r25, 3
 8d0:	81 91       	ld	r24, Z+
 8d2:	6f 01       	movw	r12, r30
 8d4:	88 23       	and	r24, r24
 8d6:	09 f4       	brne	.+2      	; 0x8da <vfprintf+0x3a>
 8d8:	ab c1       	rjmp	.+854    	; 0xc30 <__stack+0x331>
 8da:	85 32       	cpi	r24, 0x25	; 37
 8dc:	39 f4       	brne	.+14     	; 0x8ec <vfprintf+0x4c>
 8de:	93 fd       	sbrc	r25, 3
 8e0:	85 91       	lpm	r24, Z+
 8e2:	93 ff       	sbrs	r25, 3
 8e4:	81 91       	ld	r24, Z+
 8e6:	6f 01       	movw	r12, r30
 8e8:	85 32       	cpi	r24, 0x25	; 37
 8ea:	29 f4       	brne	.+10     	; 0x8f6 <vfprintf+0x56>
 8ec:	b7 01       	movw	r22, r14
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	0e 94 38 06 	call	0xc70	; 0xc70 <fputc>
 8f4:	e7 cf       	rjmp	.-50     	; 0x8c4 <vfprintf+0x24>
 8f6:	51 2c       	mov	r5, r1
 8f8:	31 2c       	mov	r3, r1
 8fa:	20 e0       	ldi	r18, 0x00	; 0
 8fc:	20 32       	cpi	r18, 0x20	; 32
 8fe:	a0 f4       	brcc	.+40     	; 0x928 <__stack+0x29>
 900:	8b 32       	cpi	r24, 0x2B	; 43
 902:	69 f0       	breq	.+26     	; 0x91e <__stack+0x1f>
 904:	30 f4       	brcc	.+12     	; 0x912 <__stack+0x13>
 906:	80 32       	cpi	r24, 0x20	; 32
 908:	59 f0       	breq	.+22     	; 0x920 <__stack+0x21>
 90a:	83 32       	cpi	r24, 0x23	; 35
 90c:	69 f4       	brne	.+26     	; 0x928 <__stack+0x29>
 90e:	20 61       	ori	r18, 0x10	; 16
 910:	2c c0       	rjmp	.+88     	; 0x96a <__stack+0x6b>
 912:	8d 32       	cpi	r24, 0x2D	; 45
 914:	39 f0       	breq	.+14     	; 0x924 <__stack+0x25>
 916:	80 33       	cpi	r24, 0x30	; 48
 918:	39 f4       	brne	.+14     	; 0x928 <__stack+0x29>
 91a:	21 60       	ori	r18, 0x01	; 1
 91c:	26 c0       	rjmp	.+76     	; 0x96a <__stack+0x6b>
 91e:	22 60       	ori	r18, 0x02	; 2
 920:	24 60       	ori	r18, 0x04	; 4
 922:	23 c0       	rjmp	.+70     	; 0x96a <__stack+0x6b>
 924:	28 60       	ori	r18, 0x08	; 8
 926:	21 c0       	rjmp	.+66     	; 0x96a <__stack+0x6b>
 928:	27 fd       	sbrc	r18, 7
 92a:	27 c0       	rjmp	.+78     	; 0x97a <__stack+0x7b>
 92c:	30 ed       	ldi	r19, 0xD0	; 208
 92e:	38 0f       	add	r19, r24
 930:	3a 30       	cpi	r19, 0x0A	; 10
 932:	78 f4       	brcc	.+30     	; 0x952 <__stack+0x53>
 934:	26 ff       	sbrs	r18, 6
 936:	06 c0       	rjmp	.+12     	; 0x944 <__stack+0x45>
 938:	fa e0       	ldi	r31, 0x0A	; 10
 93a:	5f 9e       	mul	r5, r31
 93c:	30 0d       	add	r19, r0
 93e:	11 24       	eor	r1, r1
 940:	53 2e       	mov	r5, r19
 942:	13 c0       	rjmp	.+38     	; 0x96a <__stack+0x6b>
 944:	8a e0       	ldi	r24, 0x0A	; 10
 946:	38 9e       	mul	r3, r24
 948:	30 0d       	add	r19, r0
 94a:	11 24       	eor	r1, r1
 94c:	33 2e       	mov	r3, r19
 94e:	20 62       	ori	r18, 0x20	; 32
 950:	0c c0       	rjmp	.+24     	; 0x96a <__stack+0x6b>
 952:	8e 32       	cpi	r24, 0x2E	; 46
 954:	21 f4       	brne	.+8      	; 0x95e <__stack+0x5f>
 956:	26 fd       	sbrc	r18, 6
 958:	6b c1       	rjmp	.+726    	; 0xc30 <__stack+0x331>
 95a:	20 64       	ori	r18, 0x40	; 64
 95c:	06 c0       	rjmp	.+12     	; 0x96a <__stack+0x6b>
 95e:	8c 36       	cpi	r24, 0x6C	; 108
 960:	11 f4       	brne	.+4      	; 0x966 <__stack+0x67>
 962:	20 68       	ori	r18, 0x80	; 128
 964:	02 c0       	rjmp	.+4      	; 0x96a <__stack+0x6b>
 966:	88 36       	cpi	r24, 0x68	; 104
 968:	41 f4       	brne	.+16     	; 0x97a <__stack+0x7b>
 96a:	f6 01       	movw	r30, r12
 96c:	93 fd       	sbrc	r25, 3
 96e:	85 91       	lpm	r24, Z+
 970:	93 ff       	sbrs	r25, 3
 972:	81 91       	ld	r24, Z+
 974:	6f 01       	movw	r12, r30
 976:	81 11       	cpse	r24, r1
 978:	c1 cf       	rjmp	.-126    	; 0x8fc <vfprintf+0x5c>
 97a:	98 2f       	mov	r25, r24
 97c:	9f 7d       	andi	r25, 0xDF	; 223
 97e:	95 54       	subi	r25, 0x45	; 69
 980:	93 30       	cpi	r25, 0x03	; 3
 982:	28 f4       	brcc	.+10     	; 0x98e <__stack+0x8f>
 984:	0c 5f       	subi	r16, 0xFC	; 252
 986:	1f 4f       	sbci	r17, 0xFF	; 255
 988:	ff e3       	ldi	r31, 0x3F	; 63
 98a:	f9 83       	std	Y+1, r31	; 0x01
 98c:	0d c0       	rjmp	.+26     	; 0x9a8 <__stack+0xa9>
 98e:	83 36       	cpi	r24, 0x63	; 99
 990:	31 f0       	breq	.+12     	; 0x99e <__stack+0x9f>
 992:	83 37       	cpi	r24, 0x73	; 115
 994:	71 f0       	breq	.+28     	; 0x9b2 <__stack+0xb3>
 996:	83 35       	cpi	r24, 0x53	; 83
 998:	09 f0       	breq	.+2      	; 0x99c <__stack+0x9d>
 99a:	5b c0       	rjmp	.+182    	; 0xa52 <__stack+0x153>
 99c:	22 c0       	rjmp	.+68     	; 0x9e2 <__stack+0xe3>
 99e:	f8 01       	movw	r30, r16
 9a0:	80 81       	ld	r24, Z
 9a2:	89 83       	std	Y+1, r24	; 0x01
 9a4:	0e 5f       	subi	r16, 0xFE	; 254
 9a6:	1f 4f       	sbci	r17, 0xFF	; 255
 9a8:	44 24       	eor	r4, r4
 9aa:	43 94       	inc	r4
 9ac:	51 2c       	mov	r5, r1
 9ae:	54 01       	movw	r10, r8
 9b0:	15 c0       	rjmp	.+42     	; 0x9dc <__stack+0xdd>
 9b2:	38 01       	movw	r6, r16
 9b4:	f2 e0       	ldi	r31, 0x02	; 2
 9b6:	6f 0e       	add	r6, r31
 9b8:	71 1c       	adc	r7, r1
 9ba:	f8 01       	movw	r30, r16
 9bc:	a0 80       	ld	r10, Z
 9be:	b1 80       	ldd	r11, Z+1	; 0x01
 9c0:	26 ff       	sbrs	r18, 6
 9c2:	03 c0       	rjmp	.+6      	; 0x9ca <__stack+0xcb>
 9c4:	65 2d       	mov	r22, r5
 9c6:	70 e0       	ldi	r23, 0x00	; 0
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <__stack+0xcf>
 9ca:	6f ef       	ldi	r22, 0xFF	; 255
 9cc:	7f ef       	ldi	r23, 0xFF	; 255
 9ce:	c5 01       	movw	r24, r10
 9d0:	2c 87       	std	Y+12, r18	; 0x0c
 9d2:	0e 94 2d 06 	call	0xc5a	; 0xc5a <strnlen>
 9d6:	2c 01       	movw	r4, r24
 9d8:	83 01       	movw	r16, r6
 9da:	2c 85       	ldd	r18, Y+12	; 0x0c
 9dc:	2f 77       	andi	r18, 0x7F	; 127
 9de:	22 2e       	mov	r2, r18
 9e0:	17 c0       	rjmp	.+46     	; 0xa10 <__stack+0x111>
 9e2:	38 01       	movw	r6, r16
 9e4:	f2 e0       	ldi	r31, 0x02	; 2
 9e6:	6f 0e       	add	r6, r31
 9e8:	71 1c       	adc	r7, r1
 9ea:	f8 01       	movw	r30, r16
 9ec:	a0 80       	ld	r10, Z
 9ee:	b1 80       	ldd	r11, Z+1	; 0x01
 9f0:	26 ff       	sbrs	r18, 6
 9f2:	03 c0       	rjmp	.+6      	; 0x9fa <__stack+0xfb>
 9f4:	65 2d       	mov	r22, r5
 9f6:	70 e0       	ldi	r23, 0x00	; 0
 9f8:	02 c0       	rjmp	.+4      	; 0x9fe <__stack+0xff>
 9fa:	6f ef       	ldi	r22, 0xFF	; 255
 9fc:	7f ef       	ldi	r23, 0xFF	; 255
 9fe:	c5 01       	movw	r24, r10
 a00:	2c 87       	std	Y+12, r18	; 0x0c
 a02:	0e 94 22 06 	call	0xc44	; 0xc44 <strnlen_P>
 a06:	2c 01       	movw	r4, r24
 a08:	2c 85       	ldd	r18, Y+12	; 0x0c
 a0a:	20 68       	ori	r18, 0x80	; 128
 a0c:	22 2e       	mov	r2, r18
 a0e:	83 01       	movw	r16, r6
 a10:	23 fc       	sbrc	r2, 3
 a12:	1b c0       	rjmp	.+54     	; 0xa4a <__stack+0x14b>
 a14:	83 2d       	mov	r24, r3
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	48 16       	cp	r4, r24
 a1a:	59 06       	cpc	r5, r25
 a1c:	b0 f4       	brcc	.+44     	; 0xa4a <__stack+0x14b>
 a1e:	b7 01       	movw	r22, r14
 a20:	80 e2       	ldi	r24, 0x20	; 32
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	0e 94 38 06 	call	0xc70	; 0xc70 <fputc>
 a28:	3a 94       	dec	r3
 a2a:	f4 cf       	rjmp	.-24     	; 0xa14 <__stack+0x115>
 a2c:	f5 01       	movw	r30, r10
 a2e:	27 fc       	sbrc	r2, 7
 a30:	85 91       	lpm	r24, Z+
 a32:	27 fe       	sbrs	r2, 7
 a34:	81 91       	ld	r24, Z+
 a36:	5f 01       	movw	r10, r30
 a38:	b7 01       	movw	r22, r14
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	0e 94 38 06 	call	0xc70	; 0xc70 <fputc>
 a40:	31 10       	cpse	r3, r1
 a42:	3a 94       	dec	r3
 a44:	f1 e0       	ldi	r31, 0x01	; 1
 a46:	4f 1a       	sub	r4, r31
 a48:	51 08       	sbc	r5, r1
 a4a:	41 14       	cp	r4, r1
 a4c:	51 04       	cpc	r5, r1
 a4e:	71 f7       	brne	.-36     	; 0xa2c <__stack+0x12d>
 a50:	e5 c0       	rjmp	.+458    	; 0xc1c <__stack+0x31d>
 a52:	84 36       	cpi	r24, 0x64	; 100
 a54:	11 f0       	breq	.+4      	; 0xa5a <__stack+0x15b>
 a56:	89 36       	cpi	r24, 0x69	; 105
 a58:	39 f5       	brne	.+78     	; 0xaa8 <__stack+0x1a9>
 a5a:	f8 01       	movw	r30, r16
 a5c:	27 ff       	sbrs	r18, 7
 a5e:	07 c0       	rjmp	.+14     	; 0xa6e <__stack+0x16f>
 a60:	60 81       	ld	r22, Z
 a62:	71 81       	ldd	r23, Z+1	; 0x01
 a64:	82 81       	ldd	r24, Z+2	; 0x02
 a66:	93 81       	ldd	r25, Z+3	; 0x03
 a68:	0c 5f       	subi	r16, 0xFC	; 252
 a6a:	1f 4f       	sbci	r17, 0xFF	; 255
 a6c:	08 c0       	rjmp	.+16     	; 0xa7e <__stack+0x17f>
 a6e:	60 81       	ld	r22, Z
 a70:	71 81       	ldd	r23, Z+1	; 0x01
 a72:	07 2e       	mov	r0, r23
 a74:	00 0c       	add	r0, r0
 a76:	88 0b       	sbc	r24, r24
 a78:	99 0b       	sbc	r25, r25
 a7a:	0e 5f       	subi	r16, 0xFE	; 254
 a7c:	1f 4f       	sbci	r17, 0xFF	; 255
 a7e:	2f 76       	andi	r18, 0x6F	; 111
 a80:	72 2e       	mov	r7, r18
 a82:	97 ff       	sbrs	r25, 7
 a84:	09 c0       	rjmp	.+18     	; 0xa98 <__stack+0x199>
 a86:	90 95       	com	r25
 a88:	80 95       	com	r24
 a8a:	70 95       	com	r23
 a8c:	61 95       	neg	r22
 a8e:	7f 4f       	sbci	r23, 0xFF	; 255
 a90:	8f 4f       	sbci	r24, 0xFF	; 255
 a92:	9f 4f       	sbci	r25, 0xFF	; 255
 a94:	20 68       	ori	r18, 0x80	; 128
 a96:	72 2e       	mov	r7, r18
 a98:	2a e0       	ldi	r18, 0x0A	; 10
 a9a:	30 e0       	ldi	r19, 0x00	; 0
 a9c:	a4 01       	movw	r20, r8
 a9e:	0e 94 70 06 	call	0xce0	; 0xce0 <__ultoa_invert>
 aa2:	a8 2e       	mov	r10, r24
 aa4:	a8 18       	sub	r10, r8
 aa6:	44 c0       	rjmp	.+136    	; 0xb30 <__stack+0x231>
 aa8:	85 37       	cpi	r24, 0x75	; 117
 aaa:	29 f4       	brne	.+10     	; 0xab6 <__stack+0x1b7>
 aac:	2f 7e       	andi	r18, 0xEF	; 239
 aae:	b2 2e       	mov	r11, r18
 ab0:	2a e0       	ldi	r18, 0x0A	; 10
 ab2:	30 e0       	ldi	r19, 0x00	; 0
 ab4:	25 c0       	rjmp	.+74     	; 0xb00 <__stack+0x201>
 ab6:	f2 2f       	mov	r31, r18
 ab8:	f9 7f       	andi	r31, 0xF9	; 249
 aba:	bf 2e       	mov	r11, r31
 abc:	8f 36       	cpi	r24, 0x6F	; 111
 abe:	c1 f0       	breq	.+48     	; 0xaf0 <__stack+0x1f1>
 ac0:	18 f4       	brcc	.+6      	; 0xac8 <__stack+0x1c9>
 ac2:	88 35       	cpi	r24, 0x58	; 88
 ac4:	79 f0       	breq	.+30     	; 0xae4 <__stack+0x1e5>
 ac6:	b4 c0       	rjmp	.+360    	; 0xc30 <__stack+0x331>
 ac8:	80 37       	cpi	r24, 0x70	; 112
 aca:	19 f0       	breq	.+6      	; 0xad2 <__stack+0x1d3>
 acc:	88 37       	cpi	r24, 0x78	; 120
 ace:	21 f0       	breq	.+8      	; 0xad8 <__stack+0x1d9>
 ad0:	af c0       	rjmp	.+350    	; 0xc30 <__stack+0x331>
 ad2:	2f 2f       	mov	r18, r31
 ad4:	20 61       	ori	r18, 0x10	; 16
 ad6:	b2 2e       	mov	r11, r18
 ad8:	b4 fe       	sbrs	r11, 4
 ada:	0d c0       	rjmp	.+26     	; 0xaf6 <__stack+0x1f7>
 adc:	8b 2d       	mov	r24, r11
 ade:	84 60       	ori	r24, 0x04	; 4
 ae0:	b8 2e       	mov	r11, r24
 ae2:	09 c0       	rjmp	.+18     	; 0xaf6 <__stack+0x1f7>
 ae4:	24 ff       	sbrs	r18, 4
 ae6:	0a c0       	rjmp	.+20     	; 0xafc <__stack+0x1fd>
 ae8:	9f 2f       	mov	r25, r31
 aea:	96 60       	ori	r25, 0x06	; 6
 aec:	b9 2e       	mov	r11, r25
 aee:	06 c0       	rjmp	.+12     	; 0xafc <__stack+0x1fd>
 af0:	28 e0       	ldi	r18, 0x08	; 8
 af2:	30 e0       	ldi	r19, 0x00	; 0
 af4:	05 c0       	rjmp	.+10     	; 0xb00 <__stack+0x201>
 af6:	20 e1       	ldi	r18, 0x10	; 16
 af8:	30 e0       	ldi	r19, 0x00	; 0
 afa:	02 c0       	rjmp	.+4      	; 0xb00 <__stack+0x201>
 afc:	20 e1       	ldi	r18, 0x10	; 16
 afe:	32 e0       	ldi	r19, 0x02	; 2
 b00:	f8 01       	movw	r30, r16
 b02:	b7 fe       	sbrs	r11, 7
 b04:	07 c0       	rjmp	.+14     	; 0xb14 <__stack+0x215>
 b06:	60 81       	ld	r22, Z
 b08:	71 81       	ldd	r23, Z+1	; 0x01
 b0a:	82 81       	ldd	r24, Z+2	; 0x02
 b0c:	93 81       	ldd	r25, Z+3	; 0x03
 b0e:	0c 5f       	subi	r16, 0xFC	; 252
 b10:	1f 4f       	sbci	r17, 0xFF	; 255
 b12:	06 c0       	rjmp	.+12     	; 0xb20 <__stack+0x221>
 b14:	60 81       	ld	r22, Z
 b16:	71 81       	ldd	r23, Z+1	; 0x01
 b18:	80 e0       	ldi	r24, 0x00	; 0
 b1a:	90 e0       	ldi	r25, 0x00	; 0
 b1c:	0e 5f       	subi	r16, 0xFE	; 254
 b1e:	1f 4f       	sbci	r17, 0xFF	; 255
 b20:	a4 01       	movw	r20, r8
 b22:	0e 94 70 06 	call	0xce0	; 0xce0 <__ultoa_invert>
 b26:	a8 2e       	mov	r10, r24
 b28:	a8 18       	sub	r10, r8
 b2a:	fb 2d       	mov	r31, r11
 b2c:	ff 77       	andi	r31, 0x7F	; 127
 b2e:	7f 2e       	mov	r7, r31
 b30:	76 fe       	sbrs	r7, 6
 b32:	0b c0       	rjmp	.+22     	; 0xb4a <__stack+0x24b>
 b34:	37 2d       	mov	r19, r7
 b36:	3e 7f       	andi	r19, 0xFE	; 254
 b38:	a5 14       	cp	r10, r5
 b3a:	50 f4       	brcc	.+20     	; 0xb50 <__stack+0x251>
 b3c:	74 fe       	sbrs	r7, 4
 b3e:	0a c0       	rjmp	.+20     	; 0xb54 <__stack+0x255>
 b40:	72 fc       	sbrc	r7, 2
 b42:	08 c0       	rjmp	.+16     	; 0xb54 <__stack+0x255>
 b44:	37 2d       	mov	r19, r7
 b46:	3e 7e       	andi	r19, 0xEE	; 238
 b48:	05 c0       	rjmp	.+10     	; 0xb54 <__stack+0x255>
 b4a:	ba 2c       	mov	r11, r10
 b4c:	37 2d       	mov	r19, r7
 b4e:	03 c0       	rjmp	.+6      	; 0xb56 <__stack+0x257>
 b50:	ba 2c       	mov	r11, r10
 b52:	01 c0       	rjmp	.+2      	; 0xb56 <__stack+0x257>
 b54:	b5 2c       	mov	r11, r5
 b56:	34 ff       	sbrs	r19, 4
 b58:	0d c0       	rjmp	.+26     	; 0xb74 <__stack+0x275>
 b5a:	fe 01       	movw	r30, r28
 b5c:	ea 0d       	add	r30, r10
 b5e:	f1 1d       	adc	r31, r1
 b60:	80 81       	ld	r24, Z
 b62:	80 33       	cpi	r24, 0x30	; 48
 b64:	11 f4       	brne	.+4      	; 0xb6a <__stack+0x26b>
 b66:	39 7e       	andi	r19, 0xE9	; 233
 b68:	09 c0       	rjmp	.+18     	; 0xb7c <__stack+0x27d>
 b6a:	32 ff       	sbrs	r19, 2
 b6c:	06 c0       	rjmp	.+12     	; 0xb7a <__stack+0x27b>
 b6e:	b3 94       	inc	r11
 b70:	b3 94       	inc	r11
 b72:	04 c0       	rjmp	.+8      	; 0xb7c <__stack+0x27d>
 b74:	83 2f       	mov	r24, r19
 b76:	86 78       	andi	r24, 0x86	; 134
 b78:	09 f0       	breq	.+2      	; 0xb7c <__stack+0x27d>
 b7a:	b3 94       	inc	r11
 b7c:	33 fd       	sbrc	r19, 3
 b7e:	13 c0       	rjmp	.+38     	; 0xba6 <__stack+0x2a7>
 b80:	30 ff       	sbrs	r19, 0
 b82:	06 c0       	rjmp	.+12     	; 0xb90 <__stack+0x291>
 b84:	5a 2c       	mov	r5, r10
 b86:	b3 14       	cp	r11, r3
 b88:	18 f4       	brcc	.+6      	; 0xb90 <__stack+0x291>
 b8a:	53 0c       	add	r5, r3
 b8c:	5b 18       	sub	r5, r11
 b8e:	b3 2c       	mov	r11, r3
 b90:	b3 14       	cp	r11, r3
 b92:	68 f4       	brcc	.+26     	; 0xbae <__stack+0x2af>
 b94:	b7 01       	movw	r22, r14
 b96:	80 e2       	ldi	r24, 0x20	; 32
 b98:	90 e0       	ldi	r25, 0x00	; 0
 b9a:	3c 87       	std	Y+12, r19	; 0x0c
 b9c:	0e 94 38 06 	call	0xc70	; 0xc70 <fputc>
 ba0:	b3 94       	inc	r11
 ba2:	3c 85       	ldd	r19, Y+12	; 0x0c
 ba4:	f5 cf       	rjmp	.-22     	; 0xb90 <__stack+0x291>
 ba6:	b3 14       	cp	r11, r3
 ba8:	10 f4       	brcc	.+4      	; 0xbae <__stack+0x2af>
 baa:	3b 18       	sub	r3, r11
 bac:	01 c0       	rjmp	.+2      	; 0xbb0 <__stack+0x2b1>
 bae:	31 2c       	mov	r3, r1
 bb0:	34 ff       	sbrs	r19, 4
 bb2:	12 c0       	rjmp	.+36     	; 0xbd8 <__stack+0x2d9>
 bb4:	b7 01       	movw	r22, r14
 bb6:	80 e3       	ldi	r24, 0x30	; 48
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	3c 87       	std	Y+12, r19	; 0x0c
 bbc:	0e 94 38 06 	call	0xc70	; 0xc70 <fputc>
 bc0:	3c 85       	ldd	r19, Y+12	; 0x0c
 bc2:	32 ff       	sbrs	r19, 2
 bc4:	17 c0       	rjmp	.+46     	; 0xbf4 <__stack+0x2f5>
 bc6:	31 fd       	sbrc	r19, 1
 bc8:	03 c0       	rjmp	.+6      	; 0xbd0 <__stack+0x2d1>
 bca:	88 e7       	ldi	r24, 0x78	; 120
 bcc:	90 e0       	ldi	r25, 0x00	; 0
 bce:	02 c0       	rjmp	.+4      	; 0xbd4 <__stack+0x2d5>
 bd0:	88 e5       	ldi	r24, 0x58	; 88
 bd2:	90 e0       	ldi	r25, 0x00	; 0
 bd4:	b7 01       	movw	r22, r14
 bd6:	0c c0       	rjmp	.+24     	; 0xbf0 <__stack+0x2f1>
 bd8:	83 2f       	mov	r24, r19
 bda:	86 78       	andi	r24, 0x86	; 134
 bdc:	59 f0       	breq	.+22     	; 0xbf4 <__stack+0x2f5>
 bde:	31 ff       	sbrs	r19, 1
 be0:	02 c0       	rjmp	.+4      	; 0xbe6 <__stack+0x2e7>
 be2:	8b e2       	ldi	r24, 0x2B	; 43
 be4:	01 c0       	rjmp	.+2      	; 0xbe8 <__stack+0x2e9>
 be6:	80 e2       	ldi	r24, 0x20	; 32
 be8:	37 fd       	sbrc	r19, 7
 bea:	8d e2       	ldi	r24, 0x2D	; 45
 bec:	b7 01       	movw	r22, r14
 bee:	90 e0       	ldi	r25, 0x00	; 0
 bf0:	0e 94 38 06 	call	0xc70	; 0xc70 <fputc>
 bf4:	a5 14       	cp	r10, r5
 bf6:	38 f4       	brcc	.+14     	; 0xc06 <__stack+0x307>
 bf8:	b7 01       	movw	r22, r14
 bfa:	80 e3       	ldi	r24, 0x30	; 48
 bfc:	90 e0       	ldi	r25, 0x00	; 0
 bfe:	0e 94 38 06 	call	0xc70	; 0xc70 <fputc>
 c02:	5a 94       	dec	r5
 c04:	f7 cf       	rjmp	.-18     	; 0xbf4 <__stack+0x2f5>
 c06:	aa 94       	dec	r10
 c08:	f4 01       	movw	r30, r8
 c0a:	ea 0d       	add	r30, r10
 c0c:	f1 1d       	adc	r31, r1
 c0e:	80 81       	ld	r24, Z
 c10:	b7 01       	movw	r22, r14
 c12:	90 e0       	ldi	r25, 0x00	; 0
 c14:	0e 94 38 06 	call	0xc70	; 0xc70 <fputc>
 c18:	a1 10       	cpse	r10, r1
 c1a:	f5 cf       	rjmp	.-22     	; 0xc06 <__stack+0x307>
 c1c:	33 20       	and	r3, r3
 c1e:	09 f4       	brne	.+2      	; 0xc22 <__stack+0x323>
 c20:	51 ce       	rjmp	.-862    	; 0x8c4 <vfprintf+0x24>
 c22:	b7 01       	movw	r22, r14
 c24:	80 e2       	ldi	r24, 0x20	; 32
 c26:	90 e0       	ldi	r25, 0x00	; 0
 c28:	0e 94 38 06 	call	0xc70	; 0xc70 <fputc>
 c2c:	3a 94       	dec	r3
 c2e:	f6 cf       	rjmp	.-20     	; 0xc1c <__stack+0x31d>
 c30:	f7 01       	movw	r30, r14
 c32:	86 81       	ldd	r24, Z+6	; 0x06
 c34:	97 81       	ldd	r25, Z+7	; 0x07
 c36:	02 c0       	rjmp	.+4      	; 0xc3c <__stack+0x33d>
 c38:	8f ef       	ldi	r24, 0xFF	; 255
 c3a:	9f ef       	ldi	r25, 0xFF	; 255
 c3c:	2c 96       	adiw	r28, 0x0c	; 12
 c3e:	e2 e1       	ldi	r30, 0x12	; 18
 c40:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__epilogue_restores__>

00000c44 <strnlen_P>:
 c44:	fc 01       	movw	r30, r24
 c46:	05 90       	lpm	r0, Z+
 c48:	61 50       	subi	r22, 0x01	; 1
 c4a:	70 40       	sbci	r23, 0x00	; 0
 c4c:	01 10       	cpse	r0, r1
 c4e:	d8 f7       	brcc	.-10     	; 0xc46 <strnlen_P+0x2>
 c50:	80 95       	com	r24
 c52:	90 95       	com	r25
 c54:	8e 0f       	add	r24, r30
 c56:	9f 1f       	adc	r25, r31
 c58:	08 95       	ret

00000c5a <strnlen>:
 c5a:	fc 01       	movw	r30, r24
 c5c:	61 50       	subi	r22, 0x01	; 1
 c5e:	70 40       	sbci	r23, 0x00	; 0
 c60:	01 90       	ld	r0, Z+
 c62:	01 10       	cpse	r0, r1
 c64:	d8 f7       	brcc	.-10     	; 0xc5c <strnlen+0x2>
 c66:	80 95       	com	r24
 c68:	90 95       	com	r25
 c6a:	8e 0f       	add	r24, r30
 c6c:	9f 1f       	adc	r25, r31
 c6e:	08 95       	ret

00000c70 <fputc>:
 c70:	0f 93       	push	r16
 c72:	1f 93       	push	r17
 c74:	cf 93       	push	r28
 c76:	df 93       	push	r29
 c78:	fb 01       	movw	r30, r22
 c7a:	23 81       	ldd	r18, Z+3	; 0x03
 c7c:	21 fd       	sbrc	r18, 1
 c7e:	03 c0       	rjmp	.+6      	; 0xc86 <fputc+0x16>
 c80:	8f ef       	ldi	r24, 0xFF	; 255
 c82:	9f ef       	ldi	r25, 0xFF	; 255
 c84:	28 c0       	rjmp	.+80     	; 0xcd6 <fputc+0x66>
 c86:	22 ff       	sbrs	r18, 2
 c88:	16 c0       	rjmp	.+44     	; 0xcb6 <fputc+0x46>
 c8a:	46 81       	ldd	r20, Z+6	; 0x06
 c8c:	57 81       	ldd	r21, Z+7	; 0x07
 c8e:	24 81       	ldd	r18, Z+4	; 0x04
 c90:	35 81       	ldd	r19, Z+5	; 0x05
 c92:	42 17       	cp	r20, r18
 c94:	53 07       	cpc	r21, r19
 c96:	44 f4       	brge	.+16     	; 0xca8 <fputc+0x38>
 c98:	a0 81       	ld	r26, Z
 c9a:	b1 81       	ldd	r27, Z+1	; 0x01
 c9c:	9d 01       	movw	r18, r26
 c9e:	2f 5f       	subi	r18, 0xFF	; 255
 ca0:	3f 4f       	sbci	r19, 0xFF	; 255
 ca2:	31 83       	std	Z+1, r19	; 0x01
 ca4:	20 83       	st	Z, r18
 ca6:	8c 93       	st	X, r24
 ca8:	26 81       	ldd	r18, Z+6	; 0x06
 caa:	37 81       	ldd	r19, Z+7	; 0x07
 cac:	2f 5f       	subi	r18, 0xFF	; 255
 cae:	3f 4f       	sbci	r19, 0xFF	; 255
 cb0:	37 83       	std	Z+7, r19	; 0x07
 cb2:	26 83       	std	Z+6, r18	; 0x06
 cb4:	10 c0       	rjmp	.+32     	; 0xcd6 <fputc+0x66>
 cb6:	eb 01       	movw	r28, r22
 cb8:	09 2f       	mov	r16, r25
 cba:	18 2f       	mov	r17, r24
 cbc:	00 84       	ldd	r0, Z+8	; 0x08
 cbe:	f1 85       	ldd	r31, Z+9	; 0x09
 cc0:	e0 2d       	mov	r30, r0
 cc2:	09 95       	icall
 cc4:	89 2b       	or	r24, r25
 cc6:	e1 f6       	brne	.-72     	; 0xc80 <fputc+0x10>
 cc8:	8e 81       	ldd	r24, Y+6	; 0x06
 cca:	9f 81       	ldd	r25, Y+7	; 0x07
 ccc:	01 96       	adiw	r24, 0x01	; 1
 cce:	9f 83       	std	Y+7, r25	; 0x07
 cd0:	8e 83       	std	Y+6, r24	; 0x06
 cd2:	81 2f       	mov	r24, r17
 cd4:	90 2f       	mov	r25, r16
 cd6:	df 91       	pop	r29
 cd8:	cf 91       	pop	r28
 cda:	1f 91       	pop	r17
 cdc:	0f 91       	pop	r16
 cde:	08 95       	ret

00000ce0 <__ultoa_invert>:
 ce0:	fa 01       	movw	r30, r20
 ce2:	aa 27       	eor	r26, r26
 ce4:	28 30       	cpi	r18, 0x08	; 8
 ce6:	51 f1       	breq	.+84     	; 0xd3c <__ultoa_invert+0x5c>
 ce8:	20 31       	cpi	r18, 0x10	; 16
 cea:	81 f1       	breq	.+96     	; 0xd4c <__ultoa_invert+0x6c>
 cec:	e8 94       	clt
 cee:	6f 93       	push	r22
 cf0:	6e 7f       	andi	r22, 0xFE	; 254
 cf2:	6e 5f       	subi	r22, 0xFE	; 254
 cf4:	7f 4f       	sbci	r23, 0xFF	; 255
 cf6:	8f 4f       	sbci	r24, 0xFF	; 255
 cf8:	9f 4f       	sbci	r25, 0xFF	; 255
 cfa:	af 4f       	sbci	r26, 0xFF	; 255
 cfc:	b1 e0       	ldi	r27, 0x01	; 1
 cfe:	3e d0       	rcall	.+124    	; 0xd7c <__ultoa_invert+0x9c>
 d00:	b4 e0       	ldi	r27, 0x04	; 4
 d02:	3c d0       	rcall	.+120    	; 0xd7c <__ultoa_invert+0x9c>
 d04:	67 0f       	add	r22, r23
 d06:	78 1f       	adc	r23, r24
 d08:	89 1f       	adc	r24, r25
 d0a:	9a 1f       	adc	r25, r26
 d0c:	a1 1d       	adc	r26, r1
 d0e:	68 0f       	add	r22, r24
 d10:	79 1f       	adc	r23, r25
 d12:	8a 1f       	adc	r24, r26
 d14:	91 1d       	adc	r25, r1
 d16:	a1 1d       	adc	r26, r1
 d18:	6a 0f       	add	r22, r26
 d1a:	71 1d       	adc	r23, r1
 d1c:	81 1d       	adc	r24, r1
 d1e:	91 1d       	adc	r25, r1
 d20:	a1 1d       	adc	r26, r1
 d22:	20 d0       	rcall	.+64     	; 0xd64 <__ultoa_invert+0x84>
 d24:	09 f4       	brne	.+2      	; 0xd28 <__ultoa_invert+0x48>
 d26:	68 94       	set
 d28:	3f 91       	pop	r19
 d2a:	2a e0       	ldi	r18, 0x0A	; 10
 d2c:	26 9f       	mul	r18, r22
 d2e:	11 24       	eor	r1, r1
 d30:	30 19       	sub	r19, r0
 d32:	30 5d       	subi	r19, 0xD0	; 208
 d34:	31 93       	st	Z+, r19
 d36:	de f6       	brtc	.-74     	; 0xcee <__ultoa_invert+0xe>
 d38:	cf 01       	movw	r24, r30
 d3a:	08 95       	ret
 d3c:	46 2f       	mov	r20, r22
 d3e:	47 70       	andi	r20, 0x07	; 7
 d40:	40 5d       	subi	r20, 0xD0	; 208
 d42:	41 93       	st	Z+, r20
 d44:	b3 e0       	ldi	r27, 0x03	; 3
 d46:	0f d0       	rcall	.+30     	; 0xd66 <__ultoa_invert+0x86>
 d48:	c9 f7       	brne	.-14     	; 0xd3c <__ultoa_invert+0x5c>
 d4a:	f6 cf       	rjmp	.-20     	; 0xd38 <__ultoa_invert+0x58>
 d4c:	46 2f       	mov	r20, r22
 d4e:	4f 70       	andi	r20, 0x0F	; 15
 d50:	40 5d       	subi	r20, 0xD0	; 208
 d52:	4a 33       	cpi	r20, 0x3A	; 58
 d54:	18 f0       	brcs	.+6      	; 0xd5c <__ultoa_invert+0x7c>
 d56:	49 5d       	subi	r20, 0xD9	; 217
 d58:	31 fd       	sbrc	r19, 1
 d5a:	40 52       	subi	r20, 0x20	; 32
 d5c:	41 93       	st	Z+, r20
 d5e:	02 d0       	rcall	.+4      	; 0xd64 <__ultoa_invert+0x84>
 d60:	a9 f7       	brne	.-22     	; 0xd4c <__ultoa_invert+0x6c>
 d62:	ea cf       	rjmp	.-44     	; 0xd38 <__ultoa_invert+0x58>
 d64:	b4 e0       	ldi	r27, 0x04	; 4
 d66:	a6 95       	lsr	r26
 d68:	97 95       	ror	r25
 d6a:	87 95       	ror	r24
 d6c:	77 95       	ror	r23
 d6e:	67 95       	ror	r22
 d70:	ba 95       	dec	r27
 d72:	c9 f7       	brne	.-14     	; 0xd66 <__ultoa_invert+0x86>
 d74:	00 97       	sbiw	r24, 0x00	; 0
 d76:	61 05       	cpc	r22, r1
 d78:	71 05       	cpc	r23, r1
 d7a:	08 95       	ret
 d7c:	9b 01       	movw	r18, r22
 d7e:	ac 01       	movw	r20, r24
 d80:	0a 2e       	mov	r0, r26
 d82:	06 94       	lsr	r0
 d84:	57 95       	ror	r21
 d86:	47 95       	ror	r20
 d88:	37 95       	ror	r19
 d8a:	27 95       	ror	r18
 d8c:	ba 95       	dec	r27
 d8e:	c9 f7       	brne	.-14     	; 0xd82 <__ultoa_invert+0xa2>
 d90:	62 0f       	add	r22, r18
 d92:	73 1f       	adc	r23, r19
 d94:	84 1f       	adc	r24, r20
 d96:	95 1f       	adc	r25, r21
 d98:	a0 1d       	adc	r26, r0
 d9a:	08 95       	ret

00000d9c <__prologue_saves__>:
 d9c:	2f 92       	push	r2
 d9e:	3f 92       	push	r3
 da0:	4f 92       	push	r4
 da2:	5f 92       	push	r5
 da4:	6f 92       	push	r6
 da6:	7f 92       	push	r7
 da8:	8f 92       	push	r8
 daa:	9f 92       	push	r9
 dac:	af 92       	push	r10
 dae:	bf 92       	push	r11
 db0:	cf 92       	push	r12
 db2:	df 92       	push	r13
 db4:	ef 92       	push	r14
 db6:	ff 92       	push	r15
 db8:	0f 93       	push	r16
 dba:	1f 93       	push	r17
 dbc:	cf 93       	push	r28
 dbe:	df 93       	push	r29
 dc0:	cd b7       	in	r28, 0x3d	; 61
 dc2:	de b7       	in	r29, 0x3e	; 62
 dc4:	ca 1b       	sub	r28, r26
 dc6:	db 0b       	sbc	r29, r27
 dc8:	0f b6       	in	r0, 0x3f	; 63
 dca:	f8 94       	cli
 dcc:	de bf       	out	0x3e, r29	; 62
 dce:	0f be       	out	0x3f, r0	; 63
 dd0:	cd bf       	out	0x3d, r28	; 61
 dd2:	09 94       	ijmp

00000dd4 <__epilogue_restores__>:
 dd4:	2a 88       	ldd	r2, Y+18	; 0x12
 dd6:	39 88       	ldd	r3, Y+17	; 0x11
 dd8:	48 88       	ldd	r4, Y+16	; 0x10
 dda:	5f 84       	ldd	r5, Y+15	; 0x0f
 ddc:	6e 84       	ldd	r6, Y+14	; 0x0e
 dde:	7d 84       	ldd	r7, Y+13	; 0x0d
 de0:	8c 84       	ldd	r8, Y+12	; 0x0c
 de2:	9b 84       	ldd	r9, Y+11	; 0x0b
 de4:	aa 84       	ldd	r10, Y+10	; 0x0a
 de6:	b9 84       	ldd	r11, Y+9	; 0x09
 de8:	c8 84       	ldd	r12, Y+8	; 0x08
 dea:	df 80       	ldd	r13, Y+7	; 0x07
 dec:	ee 80       	ldd	r14, Y+6	; 0x06
 dee:	fd 80       	ldd	r15, Y+5	; 0x05
 df0:	0c 81       	ldd	r16, Y+4	; 0x04
 df2:	1b 81       	ldd	r17, Y+3	; 0x03
 df4:	aa 81       	ldd	r26, Y+2	; 0x02
 df6:	b9 81       	ldd	r27, Y+1	; 0x01
 df8:	ce 0f       	add	r28, r30
 dfa:	d1 1d       	adc	r29, r1
 dfc:	0f b6       	in	r0, 0x3f	; 63
 dfe:	f8 94       	cli
 e00:	de bf       	out	0x3e, r29	; 62
 e02:	0f be       	out	0x3f, r0	; 63
 e04:	cd bf       	out	0x3d, r28	; 61
 e06:	ed 01       	movw	r28, r26
 e08:	08 95       	ret

00000e0a <_exit>:
 e0a:	f8 94       	cli

00000e0c <__stop_program>:
 e0c:	ff cf       	rjmp	.-2      	; 0xe0c <__stop_program>
